CREATE TABLE CUSTOMERS (
CID INTEGER PRIMARY KEY,
CNAME VARCHAR(20)
);

CREATE TABLE ACCOUNT (ANO INTEGER PRIMARY KEY,ATYPE CHAR(1) CHECK(ATYPE IN ('S', 'C')),BALANCE INTEGER DEFAULT 0,
CID INTEGER,
FOREIGN KEY (CID) REFERENCES CUSTOMERS (CID)
);
CREATE TABLE TXN (TID INTEGER PRIMARY KEY,TTYPE CHAR(1) CHECK(TTYPE IN ('D', 'W')),
TDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,ANO INTEGER,TAMT INTEGER,
FOREIGN KEY (ANO) REFERENCES ACCOUNT (ANO)
);

INSERT INTO CUSTOMERS VALUES(10001,'TAMIL SELVAN');

INSERT INTO CUSTOMERS VALUES(10002,'DHEENADHAYALAN');

INSERT INTO CUSTOMERS VALUES(10003,'THAMILAN');



INSERT INTO ACCOUNT(ANO, ATYPE,CID) VALUES(20001,'S',10001);
INSERT INTO ACCOUNT(ANO, ATYPE,CID) VALUES(20002,'S',10002);

INSERT INTO ACCOUNT(ANO, ATYPE,CID) VALUES(20003,'C',10003);



SELECT * FROM CUSTOMERS;



COLUMN ATYPE FORMAT A10;


SELECT * FROM ACCOUNT;



// FUNCTION //
CREATE OR REPLACE FUNCTION deposit_trigger_function()
RETURNS TRIGGER AS $$
BEGIN
IF NEW.TTYPE = 'D' THEN
UPDATE ACCOUNT
SET BALANCE = BALANCE + NEW.TAMT
WHERE ANO = NEW.ANO;
END IF;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

// TRIGGER //
CREATE TRIGGER deposit_trigger
AFTER INSERT ON TXN
FOR EACH ROW
EXECUTE FUNCTION deposit_trigger_function();



INSERT INTO TXN VALUES(30001,'D',CURRENT_TIMESTAMP,20001,75000);

INSERT INTO TXN VALUES(30002,'D',CURRENT_TIMESTAMP,20002,85000);

INSERT INTO TXN VALUES(30003,'D',CURRENT_TIMESTAMP,20003,75000);



COLUMN TDATE FORMAT A30;

COLUMN TTYPE FORMAT A10;


SELECT * FROM TXN;


SELECT A.ANO,C.CNAME,A.ATYPE,A.BALANCE,A.CID FROM CUSTOMERS C,ACCOUNT A WHERE C.CID=A.CID;



// FUNCTION //
CREATE OR REPLACE FUNCTION withdraw_trigger_function()
RETURNS TRIGGER AS 
$$
DECLARE
bal INTEGER;
BEGIN
IF NEW.TTYPE = 'W' THEN
SELECT BALANCE INTO bal FROM ACCOUNT WHERE ANO = NEW.ANO;
IF bal - NEW.TAMT >= 1000 THEN
UPDATE ACCOUNT SET BALANCE = BALANCE - NEW.TAMT
WHERE ANO = NEW.ANO;
ELSE
RAISE EXCEPTION 'NO MINIMUM BALANCE';
END IF;
END IF;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

// TRIGGER //
CREATE TRIGGER withdraw_trigger
BEFORE INSERT ON TXN
FOR EACH ROW
EXECUTE FUNCTION withdraw_trigger_function();

INSERT INTO TXN VALUES(30011,'W',CURRENT_TIMESTAMP,20001,20000); 



COLUMN TDATE FORMAT A30;


COLUMN TTYPE FORMAT A10;


SELECT * FROM TXN;



SELECT A.ANO,C.CNAME,A.ATYPE,A.BALANCE,A.CID FROM CUSTOMERS C,ACCOUNT A WHERE C.CID=A.CID;




 SELECT TID,TDATE,COUNT(*) FROM TXN GROUP BY TID,TDATE;
 
 tid  |           tdate            | count
-------+----------------------------+-------
 30001 | 2024-11-15 17:58:04.027157 |     1
 30002 | 2024-11-15 17:58:04.030919 |     1
 30011 | 2024-11-15 18:03:14.814358 |     1
 30003 | 2024-11-15 17:58:04.032934 |     1

// TO COVERT TDATE INTO STRING TO CHECK THE DATE ALREADY EXIST OR NOT //
 SELECT TID,SUBSTR(TDATE ::VARCHAR,1,10),COUNT(*) FROM TXN GROUP BY TID,SUBSTR(TDATE ::VARCHAR,1,10);

// FUNCTION //
CREATE OR REPLACE FUNCTION RESTRICT_TXN()
RETURNS TRIGGER AS
$$
DECLARE
CNT SMALLINT;
BEGIN
SELECT COUNT(*) INTO CNT FROM TXN
WHERE ANO=NEW.ANO AND SUBSTR(TDATE :: VARCHAR,1,10) = SUBSTR(NEW.TDATE :: VARCHAR,1,10);
IF CNT=3 THEN
RAISE EXCEPTION 'ONLY THREE TRANSACTIONS ARE PERMITTED ON A DAY';
END IF;
RETURN NEW;
END;
$$
LANGUAGE 'plpgsql';

// TRIGGER //
CREATE TRIGGER RESTRICT
BEFORE INSERT ON TXN
FOR EACH ROW
EXECUTE PROCEDURE RESTRICT_TXN();

CREATE OR REPLACE FUNCTION RESTRICT_WTHDRAW_TXN()
RETURNS TRIGGER AS
$$
DECLARE
BAL INTEGER DEFAULT 0;
BEGIN
IF NEW.TTYPE = 'W' THEN
BAL=BAL+BAL;
IF BAL+NEW.TAMT<= 20000 THEN
UPDATE ACCOUNT SET BALANCE = BALANCE - NEW.TAMT
WHERE ANO = NEW.ANO;
ELSE
RAISE EXCEPTION 'ALREADY WITHDRWAL LIMIT CROSSED';
END IF;
END IF;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER RESTRICT_WTHDRAW
BEFORE INSERT ON TXN
FOR EACH ROW
EXECUTE PROCEDURE RESTRICT_WTHDRAW_TXN();